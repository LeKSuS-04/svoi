// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package q

import (
	"context"
)

const addStats = `-- name: AddStats :exec
UPDATE stats
SET
    svo_count = svo_count + ?,
    zov_count = zov_count + ?,
    likvidirovan_count = likvidirovan_count + ?
WHERE
    user_id = ? AND chat_id = ?
`

type AddStatsParams struct {
	SvoCount          int64
	ZovCount          int64
	LikvidirovanCount int64
	UserID            int64
	ChatID            int64
}

func (q *Queries) AddStats(ctx context.Context, arg AddStatsParams) error {
	_, err := q.db.ExecContext(ctx, addStats,
		arg.SvoCount,
		arg.ZovCount,
		arg.LikvidirovanCount,
		arg.UserID,
		arg.ChatID,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, displayed_name)
VALUES (?, ?)
`

type CreateUserParams struct {
	ID            int64
	DisplayedName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.DisplayedName)
	return err
}

const getChatStats = `-- name: GetChatStats :many
SELECT user_id, svo_count, zov_count, likvidirovan_count
FROM stats
WHERE chat_id = ? AND svo_count + zov_count > 0
ORDER BY svo_count + zov_count DESC
`

type GetChatStatsRow struct {
	UserID            int64
	SvoCount          int64
	ZovCount          int64
	LikvidirovanCount int64
}

func (q *Queries) GetChatStats(ctx context.Context, chatID int64) ([]GetChatStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChatStats, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatStatsRow
	for rows.Next() {
		var i GetChatStatsRow
		if err := rows.Scan(
			&i.UserID,
			&i.SvoCount,
			&i.ZovCount,
			&i.LikvidirovanCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT displayed_name
FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var displayed_name string
	err := row.Scan(&displayed_name)
	return displayed_name, err
}

const initStat = `-- name: InitStat :exec
INSERT OR IGNORE INTO stats (user_id, chat_id)
VALUES (?, ?)
`

type InitStatParams struct {
	UserID int64
	ChatID int64
}

func (q *Queries) InitStat(ctx context.Context, arg InitStatParams) error {
	_, err := q.db.ExecContext(ctx, initStat, arg.UserID, arg.ChatID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET displayed_name = ?
WHERE id = ?
`

type UpdateUserParams struct {
	DisplayedName string
	ID            int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.DisplayedName, arg.ID)
	return err
}
